import org.yaml.snakeyaml.Yaml

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-parcelize"
apply plugin: "org.jetbrains.dokka"
apply plugin: "maven-publish"

apply from: './jacoco.gradle'

static String parseArchiveName(isDebug) {
    return getArtifactProperty("artifactId", isDebug) + "-" + getArtifactProperty("versionPrefix", isDebug) + "." + System.getenv().BUILD_NUMBER
}

static String getFileName(isDebug) {
    if (isDebug) { return ".jenkins/ci-build.yaml" } else { return ".jenkins/release-build.yaml" }
}

static String getArtifactProperty(propertyName, isDebug) {
    InputStream input = new FileInputStream(new File(getFileName(isDebug)))
    Yaml yaml = new Yaml()
    for (Object data: yaml.loadAll(input)){
        Map<String, Object> map = (Map<String, Object>) data
        def artifacts = map.get("post").get("commands").get(0).get("options")
        return (String) artifacts.get(propertyName)
    }
}

android {
    compileSdk 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 31

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }

    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        pickFirst 'META-INF/com.fitb.core.util.kotlin_module'
    }

    libraryVariants.all { variant ->
        if (variant.name != "release") {
            android.defaultConfig.versionName getArtifactProperty("versionPrefix", true)
        } else {
            android.defaultConfig.versionName getArtifactProperty("versionPrefix", false)
        }

        variant.outputs.all {
            outputFileName = "${parseArchiveName(variant.name != "release")}.aar"

            tasks.create(name: "move${variant.name.capitalize()}PomToOutputDir", type: Copy) {
                from file("$buildDir/publications/${variant.name}/pom-default.xml")
                into file("$buildDir/outputs/aar/")

                rename { String fileName ->
                    "${parseArchiveName(variant.name != "release")}.pom"
                }
            }
            tasks.withType(GenerateModuleMetadata) {
                enabled = false
            }
        }

        buildTypes {
            debug {
                signingConfig debug.signingConfig
                minifyEnabled false
            }
            ist {
                signingConfig debug.signingConfig
                minifyEnabled false
            }
        }
    }
    afterEvaluate {
        publishing {
            publications {
                debug(MavenPublication) {
                    from components.debug

                    groupId = getArtifactProperty("groupId", true)
                    artifactId = getArtifactProperty("artifactId", true)
                    version = "${getArtifactProperty("versionPrefix", true)}.${System.getenv().BUILD_NUMBER}"
                }

                release(MavenPublication) {
                    from components.release

                    groupId = getArtifactProperty("groupId", false)
                    artifactId = getArtifactProperty("artifactId", false)
                    version = "${getArtifactProperty("versionPrefix", false)}.${System.getenv().BUILD_NUMBER}"
                }
            }
        }
    }
    tasks.named("dokkaHtml") {
        outputDirectory.set(new File("$buildDir/docs"))
        dokkaSourceSets {
            configureEach {
                externalDocumentationLink {
                    noJdkLink.set(true)
                    noStdlibLink.set(true)
                    noAndroidSdkLink.set(true)
                    url.set(new URL("https://developer.android.com/reference/"))
                    packageListUrl.set(new URL("file:///${rootDir}/package-list"))
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'

    // Testing Dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.0.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.0'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'org.mockito:mockito-inline:3.12.4'
}